<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="docbook.css" type="text/css"?>

<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.docbook.org/xml/4.5/docbookx.dtd">


<refentry>
	<refentryinfo>
		<author>
		<firstname>Matthew</firstname>
		<lineage>Todd</lineage>
		</author>
		<date>May 2010</date>
	</refentryinfo>

	<refmeta><refentrytitle>Test Parser</refentrytitle></refmeta>
	
	<refnamediv>
		<refname>Test Parser</refname>
		<refpurpose>Visualizes a test framework's results.</refpurpose>
	</refnamediv>

	<refsect1>
		<title>Description</title>
		<para> I built Test Parser to help me visualize test results. I
			designed it to be extensible so that I or someone else could
			later add new test frameworks and/or user interfaces. This way,
			whenever you end up working with a new framework that does not
			provide a nice-clean interface, you only have to write a parser
			to utilize what has been already written previously.
			Test Parser is intended for a primarily developer audience,
			but I can see it being used in other situations.
		</para>
		<para> When running, Test Parser will output the runner's stderr output
			to the console (stderr), so you can see what your runner is
			printing out. Test Parser will also output some stuff to stderr,
			but I currently have most of it logging to TestParser.log. 
		</para>
		<refsect2>
			<title>History</title>
			<para>I built Test Parser to help me visualize/read the test
				results from Boost's Test framework. Before I realized that it
				could easily be extended to other frameworks, I called it Boost
				Test Parser. But since there is no affiliation with Boost, I've
				since changed the name.</para>
		</refsect2>
		<refsect2>
			<title>Options</title>
			<variablelist>
				<varlistentry>
					<term><option>--help</option></term>
					<listitem><para>Display help information.</para></listitem>
				</varlistentry>
				<varlistentry>
					<term><option>--text</option></term>
					<listitem><para>Use console/text output.</para></listitem>
				</varlistentry>
				<varlistentry>
					<term><option>--gui <replaceable>&lt;GUI&gt;</replaceable></option></term>
					<listitem>
						<para>Use specified gui.</para>
						<itemizedlist>
							<listitem><para>Simple (default)</para></listitem>
						</itemizedlist>
					</listitem>
				</varlistentry>
			</variablelist>
		</refsect2>
		<refsect2>
			<title>Supported Test Formats</title>
			<itemizedlist>
				<listitem><para> Boost Test</para>
					<simplelist>
						<member>v0.1.0 - boost 1.40</member>
					</simplelist>
				</listitem>
				<listitem><para>Python Unittest</para></listitem>
			</itemizedlist>
			<para> I have no plans to support other test formats, unless asked 
				or I find the need. So if you desire a particular format,
				either notify me with the relevant information or feel free to
				implement yourself (fork the github repository.) If you plan
				on implementing yourself, you might want to check github issues
				to see if I have any plans on implementing that framework
				already or if I plan on making any changes that will complicate
				matters / break your code.
			</para>
			<refsect3>
				<title>Warnings / Minor Details</title>
				<para>
					Because of how Python Unittest is designed, we require
	    			that the test runner be setup a certain way. For parsing to work,
	    			we need the verbosity level to be set to 2. For running to work,
	    			we need the information all output to stdout. I.e: use the
	    			following command in your test runner.
	    
	    			<screen>unittest.TextTestRunner(verbosity=2, stream=sys.stdout).run(suite)</screen>
				</para>
			</refsect3>
		</refsect2>
		<refsect2>
			<title>Displays / Views</title>
			<para> Test Parser will eventually have multiple display views
				available to the user. Even when I complete more complicated
				views, I still plan to keep the older ones available so that
				there is something to fall back on in case of a bug.
				Of course if the more advanced views provide features that
				aren't of interest, then you can use the basic ones.
			</para>
			<para> The simplest display format, but the least useful/appetizing
				is simple console/text output. Similar to the output the test
				runner might output, the text output is useful for formatting
				it and making it easier to read. Nonetheless, I personally
				would only use it when I didn't have access to a GUI for some
				reason or another.  
			</para>
			<para> There are several GUI stages currently planned. The first
				is a simple non-interactive display. For the most part, this
				will serve most if not all uses. The latter stage(s) is to
				incorporate user interaction, allowing the user to rerun some
				or all of the tests from the GUI. For an idea of what I hope
				to achieve with the GUI's, see Alleyoop (valgrind front end.) 
			</para>
		</refsect2>
	</refsect1>
	
	
	<refsect1>
		<title>Installation</title>
		<para>Test Parser is packaged via distutils.  To install,
			run <literal>setup.py install</literal>.
			I'm currently only using source distributions, but I'll try
			to add installers/packages later (maybe.)
		</para>
		<refsect2>
			<title>Requirements</title>
			<itemizedlist>
				<listitem><para>python 3.x</para></listitem>
				<listitem><para>PyQt4</para></listitem>
			</itemizedlist>
			<refsect3>
				<title>PyQt4 installation</title>
				<para>I followed the instructions found
					<ulink url="http://osdir.com/ml/leo-editor/2009-12/msg00033.html">
					here</ulink>. To quote:
				</para>
				<blockquote>
					<attribution>Edward</attribution>
					<para>
						Download sip and pyqt from ... the links on the website:
						<ulink url="http://www.riverbankcomputing.co.uk/news">
						http://www.riverbankcomputing.co.uk/news</ulink>
					</para>
					<para>
						Extract the .tar.gz files to, say, your home folder,
						yielding the following folders:
					</para>
					<simplelist>
						<member>PyQt-x11-gpl-4.6.2</member>
						<member>sip-4.9.3</member>
					</simplelist>
					<para>
						Follow the install directions. That is, in each folder,
						run:
					</para>
					<screen>
python3.1 configure.py
make
sudo make install
					</screen>
				</blockquote>
			</refsect3>
		</refsect2>
	</refsect1>
	
	<refsect1 id="download_links">
		<title>Download / Links</title>
		<para> Test Parser is hosted on github
			<ulink url="http://github.com/matcatc/Test_Parser">here</ulink>.
			I will likely upload packaged versions to Sourceforge at some
			point.
		</para>
	</refsect1>
	
	<refsect1>
		<title>Licensing</title>
		<para> Test Parser is licensed under
			<ulink url="http://www.gnu.org/licenses/gpl.html">
			GNU GPL v.3.0</ulink>.
		</para>
	</refsect1>
	
	<refsect1>
		<title>Change Log</title>
		<itemizedlist>
			<listitem>
				<bridgehead>v 0.1.1</bridgehead>
				<para>Pre-alpha. No packaged-release.</para>
				<itemizedlist>
					<listitem><para>Python Unittest Framework</para></listitem>
					<listitem><para>Ui's display results in chronological order</para></listitem>
					<listitem><para>Increased View orthogonality</para></listitem>
				</itemizedlist>
			</listitem>
			<listitem>
				<bridgehead>v 0.1.0</bridgehead>
				<para>Pre-alpha. No packaged-release.</para>
				<itemizedlist>
					<listitem><para>Boost Test Framework</para></listitem>
					<listitem><para>Text output</para></listitem>
					<listitem><para>Simple GUI</para></listitem>
				</itemizedlist>
			</listitem>
		</itemizedlist>
	</refsect1>
	
	<refsect1>
		<title>Road map</title>
		<para> 
			Please see <ulink url="http://github.com/matcatc/Test_Parser/issues">here</ulink>
			for current issues. Feel free to submit your own via github or
			email (matcatprg@yahoo.com).
		</para>
	</refsect1>
	
	<refsect1>
		<title>Technical Documentation</title>
		<para>Go <ulink url="./technical.html">here</ulink> for the technical documentation.
		</para>
	</refsect1>
</refentry>
