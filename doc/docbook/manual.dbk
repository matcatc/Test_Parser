<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="docbook.css" type="text/css"?>

<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.docbook.org/xml/4.5/docbookx.dtd">


<refentry>
	<refentryinfo>
		<author>
		<firstname>Matthew</firstname>
		<lineage>Todd</lineage>
		</author>
		<date>May 2010</date>
	</refentryinfo>

	<refmeta><refentrytitle>Test Parser</refentrytitle></refmeta>
	
	<refnamediv>
		<refname>Test Parser</refname>
		<refpurpose>Visualizes a test framework's results.</refpurpose>
	</refnamediv>

	<refsect1>
		<title>Description</title>
		<para> I built Test Parser to help me visualize test results. I
			designed it to be extensible so that I or someone else could
			later add new test frameworks and/or user interfaces. This way,
			whenever you end up working with a new framework that does not
			provide a nice-clean interface, you only have to write a parser
			to utilize what has been already written previously.
			Test Parser is intended for a primarily developer audience,
			but I can see it being used in other situations.
		</para>
		<note><para> When running, Test Parser will output the runner's stderr output
			to the console (stderr), so you can see what your runner is
			printing out. Test Parser will also output some stuff to stderr,
			but I currently have most of it logging to TestParser.log. 
		</para></note>
		<refsect2>
			<title>History</title>
			<para>I built Test Parser to help me visualize/read the test
				results from Boost's Test framework. Before I realized that it
				could easily be extended to other frameworks, I called it Boost
				Test Parser. But since there is no affiliation with Boost, I've
				since changed the name.</para>
		</refsect2>
		<refsect2>
			<title>Options</title>
			<variablelist>
				<varlistentry>
					<term><option>--help</option></term>
					<listitem><para>Display help information.</para></listitem>
				</varlistentry>
				<varlistentry>
					<term><option>--ui <replaceable>&lt;ui framework&gt;</replaceable></option></term>
					<listitem>
						<para>Use specified ui.</para>
						<itemizedlist>
							<listitem><para>qt</para></listitem>
							<listitem><para>tkinter</para></listitem>
							<listitem><para>text (default)</para></listitem>
						</itemizedlist>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><option>--view <replaceable>&lt;view&gt;</replaceable></option></term>
					<listitem>
						<para> Use the specified views. Multiple vies can be
							specified in the following manner:
							<screen>--view=V1 --view=V1 --view=V2</screen>
							Views earlier in the command have a higher priority.
							This means they are created earlier, thus will be
							updated earlier as well.
						</para>
						<itemizedlist>
							<listitem><para>result (default)</para></listitem>
							<listitem><para>statistic</para></listitem>
						</itemizedlist>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><option>--framework <replaceable>&lt;test framework&gt;</replaceable></option></term>
					<listitem>
						<para> Use specified framework. See below for allowed
							 frameworks.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><option>--autoexpand <parameter class="option">on/off</parameter></option></term>
					<listitem><para>Enable/disable auto-expansion</para></listitem>
				</varlistentry>
				<varlistentry>
					<term><option>--threading</option></term>
					<listitem>
						<para>Enable threading. Note that threading is
							superfluous in most situations. It also 
							leads to some bugs.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><option>-f</option></term>
					<listitem>
						<para> Read data in from a file instead of running a
							program.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</refsect2>
		<refsect2>
			<title>Supported Test Frameworks</title>
			<itemizedlist>
				<listitem><para> Boost Test</para>
					<simplelist>
						<member>v0.1.0 - boost 1.40</member>
					</simplelist>
				</listitem>
				<listitem><para>Python Unittest</para>
					<simplelist>
						<member>v0.1.1 - python 3.1.2</member>
					</simplelist>
				</listitem>
				<listitem><para>JUnit</para>
					<simplelist>
						<member>v0.1.2 - JUnit 3.8.2</member>
						<member>v0.1.2 - JUnit 4.8.1</member>
					</simplelist>
				</listitem>
			</itemizedlist>
			<note>
				<title>Version Info</title>
				<para> Note that the Test Parser versions are when particular
					framework versions were introduced. So it is expected that
					those framework versions will work in later versions.
				 </para>
			</note>
			<para> I have no plans to support other test formats, unless asked 
				or I find the need. So if you desire a particular format,
				either notify me with the relevant information or feel free to
				implement yourself (fork the github repository.) If you plan
				on implementing yourself, you might want to check github issues
				to see if I have any plans on implementing that framework
				already or if I plan on making any changes that will complicate
				matters / break your code.
			</para>
			<refsect3>
				<title>Python Unittest</title>
				<para> Because of how Python Unittest is designed, we require
	    			that the test runner be setup a certain way. For parsing to work,
	    			we need the verbosity level to be set to 2. For running to work,
	    			we need the information all output to stdout. I.e: use the
	    			following command in your test runner.
	    
	    			<screen>unittest.TextTestRunner(verbosity=2, stream=sys.stdout).run(suite)</screen>
				</para>
			</refsect3>
			<refsect3>
				<title>JUnit</title>
				<para> The JUnit framework is currently just JUnit output, not
					JUnit through Ant. Because this output doesn't contain
					more information about the passing tests, you will see
					'free-floating' test cases in the output will little
					information. Also, the user needs to setup CLASSPATH
					and pass in the full java command (in quotes):
					<screen>java junit.textui.TestRunner className</screen>
					for JUnit3 and
					<screen>java org.junit.runner.JUnitCore className</screen>
					for JUnit4. Its possible to run a JUnit3 program with
					JUnit4's command, or at least I've seen it work. TestParser
					doesn't care which you use, as long as it works. If it
					doesn't work you will likely see JUnit's error message
					appear in stderr.
				</para>
			</refsect3>
		</refsect2>
		<refsect2>
			<title>Read from file</title>
			<para>Normally when selecting a test framework, everything is
				automatically setup so that you can envoke Test Parser
				with the appriate test runner. If you want to read data
				in from a file instead, use the <option>-f</option>
				option and pass in the name of you file where the runner
				would normally go. This also allows you to read in from
				stdin by passing <literal>-</literal> as your file.
			</para>
			<para>The ability to run the test runner by hand is provided
				as a feature so that you can make other runners work
				with Test Parser when the runner isn't supported but
				the test framework data is still understood.
				When piping input to stdin instead of running the
				unittest runner through Test Parser, it is the user's
				resposibility to ensure that the data is passed in the correct
				format.
			</para>
			<warning><para>When piping in input to stdin, rerunning
				won't work.
				</para> 
			</warning>
		</refsect2>
		<refsect2>
			<title>Auto Expansion</title>
			<para> Without auto expand, when you rerun the tests
				the display tree will collapse. You will then have
				to manually go through and expand each node to
				reach your desired node. And if you rerun multiple
				times, you'll have to go through this process
				multiple times.
			</para>
			<para> Auto expand seeks to remedy this	problem. There
				are two ways to use auto expand. First is to select
				the nodes you want to be expanded/displayed after
				rerunning all the tests. Second is to simply select
				no tests and all the nodes that are currently displayed
				will be redisplayed after rerunning. 
			</para>
			<warning> <title>Qt Auto-expand + Threading</title>
				<para> When used with threading enabled, qt
					autoexpand has a couple bugs. The biggest bug is that
					the program	will sometimes seg-fault and crash. 
					The other bug is that the root node, and sometimes other
					nodes, will not expand.	Because of these bugs and the fact
					that threading hasn't been particularly	useful, I suggest
					leaving threading disabled.
				</para>
			</warning>
			<para> After auto-expanding, the scroll position will be reset
				to the position prior to rerunning.
			</para>
			<warning> <title>Tk auto-scroll</title>
				<para> Sometimes TkResultView's scroll position won't be
					set to the correct position. This is especially noticeable
					when the tree is scrolled to the very end. As it turns out,
					this bug doesn't have anything to do with the auto-scroll,
					as it is still present even when auto-scroll is disabled.
				</para>
			</warning>
		</refsect2>
	</refsect1>
	
	<refsect1>
		<title>Screenshots / Examples</title>
		<para>Go <ulink url="./screenshots.html">here</ulink>
			for screenshots and examples.
		</para>
	</refsect1>
	
	<refsect1 id="download_links">
		<title>Download / Links</title>
		<itemizedlist>
			<listitem><para>Available downloads are located
				<ulink url="http://github.com/matcatc/Test_Parser/downloads">here</ulink>.
				</para>
			</listitem>
			<listitem><para> Source code is available
				<ulink url="http://github.com/matcatc/Test_Parser">here</ulink>.
				Source code can be checked out read-only using:
				<screen>git clone git://github.com/matcatc/Test_Parser.git</screen>
				</para>
			</listitem>
			<listitem><para> Technical documentation is available 
				<ulink url="./technical.html">here</ulink>. Warning: technical
				documentation has a habit of being incomplete.
				</para>
			</listitem>
		</itemizedlist>
	</refsect1>
	
	<refsect1>
		<title>Installation</title>
		<para>Test Parser is packaged via distutils.  To install,
			run <literal>setup.py install</literal>.
			I'm currently only using source distributions, but I'll try
			to add installers/packages later (maybe.)
		</para>
		<para> Test Parser's installation is defaulted to install all
			documentation to <literal>/usr/share/doc/Test_Parser</literal>.
			Because of the directory location, you'll need to run the install
			as root. Or you can change the directory to somewhere else.
			To change the directory, either
			edit <literal>setup.cfg</literal> or pass in
			<literal>--install-data = <replaceable>&lt;new_directory&gt;</replaceable></literal>.
			Windows users will have to change the directory because the
			default is designed for *nix systems.
		</para>
		<refsect2>
			<title>Requirements</title>
			<itemizedlist>
				<listitem><para>python 3.x</para></listitem>
				<listitem><para>PyQt4 (Qt Views)</para></listitem>
				<listitem><para>Tkinter (TK Views)</para></listitem>
				<listitem><para>PLY 3.3 (JUnit)</para></listitem>
			</itemizedlist>
			<para> If you do not wish to use the features that depend upon a
				library, you do not need to install it.
			</para>
			<refsect3>
				<title>PyQt4 installation</title>
				<para>Because there wasn't a PyQt package available for
					python3 when I was developing I had to compile and install
					PyQt4 manually. If when you're trying to install Test Parser
					check to see if there is a package available. It'll be
					something like: python3-Qt4.
				</para>
				<para>I followed the instructions found
					<ulink url="http://osdir.com/ml/leo-editor/2009-12/msg00033.html">
					here</ulink>. To quote:
				</para>
				<blockquote>
					<attribution>Edward</attribution>
					<para>
						Download sip and pyqt from ... the links on the website:
						<ulink url="http://www.riverbankcomputing.co.uk/news">
						http://www.riverbankcomputing.co.uk/news</ulink>
					</para>
					<para>
						Extract the .tar.gz files to, say, your home folder,
						yielding the following folders:
					</para>
					<simplelist>
						<member>PyQt-x11-gpl-4.6.2</member>
						<member>sip-4.9.3</member>
					</simplelist>
					<para>
						Follow the install directions. That is, in each folder,
						run:
					</para>
					<screen>
python3.1 configure.py
make
sudo make install
					</screen>
				</blockquote>
			</refsect3>
			<refsect3>
				<title>Tkinter installation</title>
				<para>Tkinter is usually packaged with the python distribution.
					*nix users will probably want to get it from their favorite
					repository. Windows users will probably install Tkinter
					during their python installation, but I don't know for sure.
				</para>
			</refsect3>
			<refsect3>
				<title>PLY installation</title>
				<para><ulink url="http://www.dabeaz.com/ply/">PLY</ulink>
					(Python Lex Yacc)
					is a python package that can be installed in the
					typical ways. Just download and run
					<literal>setup.py install</literal>.
					Make sure to install it with the correct python version,
					the correct version being the one used by TestParser
					(see above.)
				</para>
			</refsect3>
		</refsect2>
	</refsect1>
	
	<refsect1>
		<title>Licensing</title>
		<para> Test Parser is licensed under
			<ulink url="http://www.gnu.org/licenses/gpl.html">
			GNU GPL v.3.0</ulink>.
		</para>
	</refsect1>
	
	<refsect1>
		<title>Change Log</title>
		<itemizedlist>
			<listitem>
				<bridgehead>v 0.1.8</bridgehead>
				<para>Pre-alpha. No packaged-release.</para>
				<itemizedlist>
					<listitem><para>Nice message displayed when runner/file can't be opened</para></listitem>
					<listitem><para>Added file input</para></listitem>
					<listitem><para>Fixed bug with Python Unittest test names</para></listitem>
				</itemizedlist>
			</listitem>
			<listitem>
				<bridgehead>v 0.1.7</bridgehead>
				<para>Pre-alpha. No packaged-release.</para>
				<itemizedlist>
					<listitem><para>Added tkinter Result and Statistic views</para></listitem>
					<listitem><para>Added auto-scroll</para></listitem>
				</itemizedlist>
			</listitem>
			<listitem>
				<bridgehead>v 0.1.6</bridgehead>
				<para>Pre-alpha. No packaged-release.</para>
				<itemizedlist>
					<listitem><para>Changed test framework cmd-line specification</para></listitem>
					<listitem><para>Added Qt statistic view</para></listitem>
					<listitem><para>Added text statistic view</para></listitem>
				</itemizedlist>
			</listitem>
			<listitem>
				<bridgehead>v 0.1.5</bridgehead>
				<para>Pre-alpha. No packaged-release.</para>
				<itemizedlist>
					<listitem><para>Added ui/view program options (ViewFactory)</para></listitem>
					<listitem><para>Made threading optional</para></listitem>
				</itemizedlist>
			</listitem>
			<listitem>
				<bridgehead>v 0.1.4</bridgehead>
				<para>Pre-alpha. No packaged-release.</para>
				<itemizedlist>
					<listitem><para>Added Qt auto expand</para></listitem>
				</itemizedlist>
			</listitem>
			<listitem>
				<bridgehead>v 0.1.3</bridgehead>
				<para>Pre-alpha. No packaged-release.</para>
				<itemizedlist>
					<listitem><para>3rd party libs only imported if needed</para></listitem>
					<listitem><para>GUI shows runner</para></listitem>
					<listitem><para>Boost: sub-suites, Fatal Error</para></listitem>
					<listitem><para>PyUnittest: sub-suites, more info</para></listitem>
					<listitem><para>GUI doesn't show "None" time</para></listitem>
				</itemizedlist>
			</listitem>
			<listitem>
				<bridgehead>v 0.1.2</bridgehead>
				<para>Pre-alpha. No packaged-release.</para>
				<itemizedlist>
					<listitem><para>Added JUnit Framework</para></listitem>
				</itemizedlist>
			</listitem>
			<listitem>
				<bridgehead>v 0.1.1</bridgehead>
				<para>Pre-alpha. No packaged-release.</para>
				<itemizedlist>
					<listitem><para>Added Python Unittest Framework</para></listitem>
					<listitem><para>Ui's display results in chronological order</para></listitem>
					<listitem><para>Increased View orthogonality</para></listitem>
				</itemizedlist>
			</listitem>
			<listitem>
				<bridgehead>v 0.1.0</bridgehead>
				<para>Pre-alpha. No packaged-release.</para>
				<itemizedlist>
					<listitem><para>Added Boost Test Framework</para></listitem>
					<listitem><para>Added Text output</para></listitem>
					<listitem><para>Added Simple GUI</para></listitem>
				</itemizedlist>
			</listitem>
		</itemizedlist>
	</refsect1>
	
	<refsect1>
		<title>Road map / issue tracker</title>
		<para> 
			Please see <ulink url="http://github.com/matcatc/Test_Parser/issues">here</ulink>
			for current issues. Feel free to submit your own via github or
			email (<email>matcatprg@yahoo.com</email>).
		</para>
	</refsect1>
</refentry>
