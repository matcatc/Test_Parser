<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="docbook.css" type="text/css"?>

<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.docbook.org/xml/4.5/docbookx.dtd">


<refentry>
	<refentryinfo>
		<author>
		<firstname>Matthew</firstname>
		<lineage>Todd</lineage>
		</author>
		<date>May 2010</date>
	</refentryinfo>

	<refmeta><refentrytitle>Test Parser</refentrytitle></refmeta>
	
	<refnamediv>
		<refname>Test Parser</refname>
		<refpurpose>Visualizes a test framework's results.</refpurpose>
	</refnamediv>

	<refsect1>
		<title>Description</title>
		<para> Since Test Parser is currently in "active" development, there
			is not much to say about usage. But I plan on releasing the
			first beta version once I've implemented a GUI display.			
		</para>
		<refsect2>
			<title>Options</title>
			<para>TODO</para>
		</refsect2>
		<refsect2>
			<title>Supported Test Formats</title>
			<itemizedlist>
				<listitem><para>Boost Test</para></listitem>
				<listitem><para>python unittest (in planning)</para></listitem>
			</itemizedlist>
			<para> I have no plans to support other test formats, unless asked 
				or I find the need. So if you desire a particular format,
				either notify me with the relevant information or feel free to
				implement yourself (fork the github repository.) If you plan
				on implementing yourself, you might want to check github issues
				to see if I have any plans on implementing that framework
				already or if I plan on making any changes that'll complicate
				matters / break your code.
			</para>
		</refsect2>
		<refsect2>
			<title>Displays / Views</title>
			<para> Test Parser will eventually have multiple display views
				available to the user. Even when I complete more complicated
				views, I still plan to keep the older ones available so that
				there is something to fall back on in case of a bug.
				Of course if the more advanced views provide features that
				aren't of interest, then you can use the basic ones.
			</para>
			<para> The simplest display format, but the least useful/appetizing
				is simple console/text output. Similar to the output the test
				runner might output, the text output is useful for formatting
				it and making it easier to read. Nonetheless, I personally
				would only use it when I didn't have access to a GUI for some
				reason or another.  
			</para>
			<para> There are several GUI stages currently planned. The first
				is a simple non-interactive display. For the most part, this
				will serve most if not all uses. The latter stage(s) is to
				incorporate user interaction, allowing the user to rerun some
				or all of the tests from the GUI. For an idea of what I hope
				to achieve with the GUI's, see Alleyoop (valgrind front end.) 
			</para>
		</refsect2>
	</refsect1>
	
	<refsect1>
		<title>History</title>
		<para>I built Test Parser to help me visualize/read the test
			results from Boost's Test framework. Before I realized that it
			could easily be extended to other frameworks, I called it Boost
			Test Parser. But since there is no affiliation with Boost, I've
			since changed the name.</para>
	</refsect1>
	
	<refsect1>
		<title>Installation</title>
		<para>Test Parser is packaged via distutils.  To install,
			run <literal>setup.py install</literal>.
			I'm currently only using source distributions. I'll try
			to add installers/packages later (maybe.)
		</para>
		<refsect2>
			<title>Requirements</title>
			<itemizedlist>
				<listitem><para>python 3.x</para></listitem>
				<listitem><para>PyQt4</para></listitem>
			</itemizedlist>
			<refsect3>
				<title>PyQt4 installation</title>
				<para>I followed the instructions found
					<ulink url="http://osdir.com/ml/leo-editor/2009-12/msg00033.html">
					here</ulink>. To quote:
				</para>
				<blockquote>
					<attribution>Edward</attribution>
					<para>
						Download sip and pyqt from ... the links on the website:
						<ulink url="http://www.riverbankcomputing.co.uk/news">
						http://www.riverbankcomputing.co.uk/news</ulink>
					</para>
					<para>
						Extract the .tar.gz files to, say, your home folder,
						yielding the following folders:
					</para>
					<itemizedlist>
						<listitem><para>PyQt-x11-gpl-4.6.2</para></listitem>
						<listitem><para>sip-4.9.3</para></listitem>
					</itemizedlist>
					<para>
						Follow the install directions. That is, in each folder,
						run:
					</para>
					<screen>
python3.1 configure.py
make
sudo make install
					</screen>
				</blockquote>
			</refsect3>
		</refsect2>
	</refsect1>
	
	<refsect1>
		<title>Technical Details</title>
		<para>On a high level, Test Parser simply runs the tests,
			parses them, and displays the results. There is more to it than
			this, mostly because I structured the code so that it is
			modular and can easily be extended, using MVC and similar
			patterns. Of course this complicates the details, but the
			overall idea is the same.</para>
		<refsect2>
			<title>Threading</title>
			<para>For most situations, the use of threading serves no
				benefit. I added threading for the following reasons</para>
			<itemizedlist>
				<listitem>
					<para>GUI responsiveness</para>
				</listitem>
				<listitem>
					<para>Desire to experiment</para>
				</listitem>
			</itemizedlist>
			<para>Clearly the second is a personal reason and has nothing
				to do with the product. But the only way to learn to is to
				do. The first is a reasonable concern: while running tests
				and parsing the results, we don't want the GUI to
				hang.</para>
			<para>Nevertheless, I worry that threading is an unnecessary
				complication (in the vein of YAGNI.) But it is always
				possible to simply just remove it. Of course we could
				always just maintain a separate threading branch.
				That way we could easily switch to threading,
				without having to commit to it.</para>
		</refsect2>
		<refsect2>
			<title>TestResults</title>
			<para>TestResults is currently "hard-coded," in that the hierarchy
				is predetermined. We should consider
				changing TestResults to use the Composite Pattern. This
				would allow for a more flexible hierarchy, although we
				might have unusual instances (e.g: test containing a suite.)
				But even if that's what the test runner outputs, we shouldn't
				worry about it.
			</para>
			<para> Also, the code to run through the
				TestResults and display it could be changed to a more flexible
				recursion routine, that isn't aware of the hierarchy. This
				is the main reason I'd want to change to the Composite Pattern:
				greater orthogonality and simpler code.
			</para>
			<para> See TestResults.dia for more information.
			</para>
		</refsect2>
	</refsect1>
	
	<refsect1 id="download_links">
		<title>Download / Links</title>
		<para> Test Parser is hosted on github
			<ulink url="http://github.com/matcatc/Test_Parser">here</ulink>.
			I will likely upload packaged versions to Sourceforge at some
			point.
		</para>
	</refsect1>
	
	<refsect1>
		<title>Licensing</title>
		<para> Test Parser is licensed under
			<ulink url="http://www.gnu.org/licenses/gpl.html">
			GNU GPL v.3.0</ulink>.
		</para>
	</refsect1>
	
	<refsect1>
		<title>Documentation</title>
		<para>There are two parts to the documentation:</para>
		<itemizedlist>
			<listitem><para>doxygen</para></listitem>
			<listitem><para>docbook</para></listitem>
		</itemizedlist>
		<para>The doxygen output is built from the documentation
			inlined in the code. Its more for developers than
			end users. I setup doxygen to use
			<ulink url="http://code.foosel.org/doxypy">doxypy</ulink>
			according to instructions I found
			<ulink url="http://www.joshuascotton.com/main/archives/80">
			here</ulink> and
			<ulink url="http://www.joshuascotton.com/main/archives/64">
			here</ulink>.
		</para>
		<para> The docbook is more to end-users, but still contains
			information for developers. This file is built from
			said docbook.
		</para>
		<para> A script was provided in order to build the documentation
			and is aptly named: <command>build_documentation.sh</command>.
			While this script can be invoked directly, it is mainly for
			use by setup.py. Setup.py has been customized so that when
			sdist is invoked, it will call <command>build_documentation.sh
			</command> and thus build all the documentation prior to packaging.
			As of June 10, 2010, all of the documentation is entirely rebuilt
			on each sdist invocation. Although I plan on designing it (probably
			through make or similar) so that it will only rebuild necessary
			files. At least if it gets to the point where it wastes too much
			time.
		</para>
	</refsect1>
	
	<refsect1>
		<title>Tests</title>
		<para> The tests used to test this product are packaged along with
			 it. This way anyone, including users, can run them on their
			 machine. To run all of the tests, run test_runner.py.
		</para>
		<para> Possible reasons for a test to fail even though the code
			is fine:
			<itemizedlist>
				<listitem><bridgehead>Data files</bridgehead>
					<para>One of the data files used in testing (e.g: 
					Boost_Test, xml) is missing or cannot be accessed.
					If its missing, its probably b/c we accidentally
					forgot to package it up with everything else. The
					latter, can happen and isn't really worth fixing.
					For instance, Boost_Test cannot be accessed when
					the application has been installed in a virtualenv.
					I haven't tried yet, but its also possible/likely
					that the same is true for a normal installation.
				</para></listitem>
				<listitem><bridgehead>Threading</bridgehead>
					<para>This is self explanatory.
					Test cases that fail randomly <emphasis>might
					</emphasis> be because of timing between
					threads. Naturally we've tried to reduce all
					threading issues.</para></listitem>
			</itemizedlist>
		</para>
	</refsect1>
	
	<refsect1>
		<title>Road map</title>
		<para> I'm currently working on a simple non-interactive GUI.
			But at the same time, I'm working on making the system more
			robust by adding tests, documentation, and such. But once
			I finish the GUI, I plan to release the first version. This
			way I *might* get some feedback before starting/finishing
			the next GUI (an user interactive version.) I will likely
			have to iterate several times before the interactive version
			is completely finished, so there will be several other minor
			releases.
		</para>
	</refsect1>
	
	<refsect1>
		<title> Other</title>
		<para> This page is currently under construction. Don't expect me to
			finalize and spifify it until I finally have a released version.
		</para>
		<para>This file is written in docbook, which is why it may appear
			somewhat strange. Its available in the repository, mentioned 
			<link linkend="download_links">above</link>.
		</para>
	</refsect1>
</refentry>
