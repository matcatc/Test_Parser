This project is an attempt to create some sort of parser for boost test. So instead of having some horrendous command line output, a developer could have something a little easier on the eyes.

As of writing, I'm focusing on the parsing and not on the display aspect. I plan to design it in such a way that the display module can be held seperate from the parsing, and therefore be interchanged with whatever the user wants to use. The two things that spring to mind are plain OOP and Strategy Pattern.

I should mention that this is my first Python project (serious coding with an final application in mind.) I've worked heavily in C++, so assume that I'll make mistakes similar to anyone who starting a new language. In particular the use of packages in python (why the init.py?) I've used Java in college, so I'll assume Python's package system serves a similar purpose and functions in a similar fashion.

Also, please give feedback. If you find something that bugs you enough to complain about it, its important enough to send me an email. Same goes for positive aspects as well. If I get no feedback, I have no clue how well this software functions in the user's perspective (and as a developer, I can't function as a true user b/c I know too much about how it functions and therefore know how to get it to work.)

Matthew A. Todd


Modules:
	-parsing
	-displaying
		- COLORS!!!

----------------------------

Road Map:

From this moment,there are several ways to proceed:
 Parsing:
 - We can parse test cases and separate into passing and failing.
 - Keep sequential
 - Define some sort of data structure so that once xml is parsed, we can pass said data structure to display module.
 
 Display:
 - We can build some sort of GUI, which would allow us to user colors.
 - We can write into html, using colors as well
    - no different than xslt, but with the ability to change into something else later
    - requires a browser
    	- user then has to run python, then browser == annoying
